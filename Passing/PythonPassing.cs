using System;
using System.IO;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Dynamic;
using System.Reflection;
using System.Text;
using Python.Runtime;

#if UNITY
using UnityEngine;
using UnityEditor;
#elif GODOT
using Godot;
#endif


namespace Python.Passing
{
    /**
     * TODO: インタープリター位置が指定できないと実行時にコケる
     * TODO: pth か py を生成
     * Interpreter. pipenv pyenv $ conda
     * https://github.com/pythonnet/pythonnet/wiki/Using-Python.NET-with-Virtual-Environments
     */
    public class Interpreter
    {
        public static void PyConsole()
        {
            CsBinder.CsharpGen(typeof(DLLTest.MyUtilities)).Compile("Client.dll");

            using (Py.GIL())
            {
                dynamic py = new PyExpandoObject();
                var socket = py.socket.socket(py.socket.AF_INET, py.socket.SOCK_DGRAM);
                socket.sendto("Hello UDP", "127.0.0.1", 50007);
                socket.close();
            }
        }

        public static void Set(string pathToVirtualEnv)
        {
            System.Environment.SetEnvironmentVariable("PATH", pathToVirtualEnv, EnvironmentVariableTarget.Process);
            System.Environment.SetEnvironmentVariable("PYTHONHOME", pathToVirtualEnv,
                EnvironmentVariableTarget.Process);
            System.Environment.SetEnvironmentVariable("PYTHONPATH",
                $"{pathToVirtualEnv}\\Lib\\site-packages;{pathToVirtualEnv}\\Lib", EnvironmentVariableTarget.Process);

            PythonEngine.PythonHome = pathToVirtualEnv;
            PythonEngine.PythonPath =
                System.Environment.GetEnvironmentVariable("PYTHONPATH", EnvironmentVariableTarget.Process);
        }
    }

    /**
     * TODO: intelisense
     * 
     * <summary>
     * Dynamic Member Lookup type for Python
     * </summary>
     *
     * <code>
     * py = new PyExpandoObject();
     * py.sys.version_info
     * py.my_value = true;
     * </code>
     */
    class PyExpandoObject : DynamicObject
    {
        private Dictionary<string, PyObject> sysModule;

        public override bool TryGetMember(GetMemberBinder binder, out object result)
        {
            try
            {
                dynamic module = Py.Import(binder.Name);
                result = module;
                return true;
            }
            catch (PythonException e)
            {
                // pip install binder.Name
                throw;
            }

            return false;
        }

        public override bool TrySetMember(SetMemberBinder binder, object value)
        {
            // オブジェクトはスコープ内で変換
            if (value.GetType().IsClass)
            {
                using (var scope = Py.CreateScope())
                {
                    // convert the binder object to a PyObject
                    var pyPerson = binder.ToPython();

                    // create a Python variable "person"
                    scope.Set("person", pyPerson);

                    // the person object may now be used in Python
                    var code = "fullName = person.FirstName + ' ' + person.LastName";
                    scope.Exec(code);
                }
            }
            // プリミティブはそのまま戻す
            else
            {
                binder.Name.ToPython().SetAttr(binder.Name, value.ToPython());
            }

            return true;
        }
    }

    class PyDoc : Attribute
    {
        public override bool IsDefaultAttribute()
        {
            return base.IsDefaultAttribute();
        }

        public override object TypeId { get; }
    }

    /**
     * TODO: レガシー
     * 指定namespace.class以下を取得
     * https://mitosuya.net/execute-all-class-in-namespace
     */
    public class CsBinder
    {
        private static CodeNamespace nameSpace;

        private const string _template = @"
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: %s
//     Date Time: %s
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
        ";
        
        public static CsBinder CsharpGen(Type typeName)
        {
            nameSpace = new CodeNamespace(name: "Client");
            var comment = new CodeCommentStatement(new CodeComment(_template));
            nameSpace.Comments.Add(comment);

            nameSpace.Imports.Add(new CodeNamespaceImport(nameSpace: "System"));
#if GODOT
            nameSpace.Imports.Add(new CodeNamespaceImport(nameSpace: "Godot"));
#elif INHOUSE
            nameSpace.Imports.Add(new CodeNamespaceImport(nameSpace: ""));
#endif

            // class Runtime {
            var mainClass = new CodeTypeDeclaration(name: "Runtime");
#if UNITY
            nameSpace.Imports.Add(new CodeNamespaceImport(nameSpace: "UnityEngine"));
            nameSpace.Imports.Add(new CodeNamespaceImport(nameSpace: "UnityEditor"));
            mainClass.BaseTypes.Add(new CodeTypeReference(typeof(MonoBehaviour)));
#endif
            var fields = typeName.GetFields(BindingFlags.GetField | BindingFlags.Public | BindingFlags.Instance);
            foreach (var field in fields)
            {
                var variable = new CodeMemberField(field.FieldType.Name, field.Name);
#if UNITY
                var codeAttrDecl = new CodeAttributeDeclaration(
                    "SerializeField",
                    new CodeAttributeArgument(new CodePrimitiveExpression(false)));
                variable.CustomAttributes.Add(codeAttrDecl);
#endif
                mainClass.Members.Add(variable);
            }

            var methods = typeName.GetMethods(BindingFlags.Public | BindingFlags.NonPublic |
                                              BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly);
            foreach (var method in methods)
            {
                var mainMethod = new CodeMemberMethod
                {
                    ReturnType = new CodeTypeReference(method.ReturnType),
                    Attributes = MemberAttributes.Public | MemberAttributes.Final,
                    Name = method.Name
                };
                mainMethod.Comments.Add(new CodeCommentStatement("doc comment"));

                CodeExpression target;
                if ((method.Attributes & MethodAttributes.Static) != 0)
                    target = new CodeSnippetExpression(typeName.FullName);
                else
                    target = new CodeObjectCreateExpression(typeName.FullName);
                
                var invoke = new CodeMethodInvokeExpression( // 関数呼び出し式
                    targetObject: target, // オブジェクト名: Console.
                    methodName: method.Name // メソッド名    : WriteLine
                );

                foreach (var p in method.GetParameters())
                {
                    invoke.Parameters.Add(new CodeArgumentReferenceExpression(p.Name));
                    var exp = new CodeParameterDeclarationExpression(p.ParameterType, p.Name);
                    mainMethod.Parameters.Add(exp);
                }

                if (method.ReturnType.Name != "Void")
                    mainMethod.Statements.Add(new CodeMethodReturnStatement(invoke));
                else
                    mainMethod.Statements.Add(invoke);

                mainClass.Members.Add(mainMethod);
            }

            return new CsBinder();
        }
        
        public void Compile(string fileName)
        {
            if (fileName.EndsWith(".cs"))
            {
                ToCode(fileName);
                return;
            }

            // https://stackoverflow.com/questions/23551757/what-are-the-possible-parameters-for-compilerparameters-compileroptions
            var compileParameters = new CompilerParameters
            {
                OutputAssembly = fileName, 
                CompilerOptions = "/optimize+ /target:library /unsafe"
            };
            var codeCompileUnit = new CodeCompileUnit();
#if UNITY
            codeCompileUnit.ReferencedAssemblies.Add("UnityEngine.dll");
            codeCompileUnit.ReferencedAssemblies.Add("UnityEditor.dll");
#elif GODOT
            codeCompileUnit.ReferencedAssemblies.Add("Godot.dll");
#elif INHOUSE
            codeCompileUnit.ReferencedAssemblies.Add("");
#endif
            codeCompileUnit.Namespaces.Add(nameSpace);

            var snippets = new CodeCompileUnit[] { };
            snippets.SetValue(codeCompileUnit, 0);

            for (var i = 1; i < AppDomain.CreateDomain().GetAssemblies().Length; i++)
            {
                var file = AppDomain.CreateDomain().GetAssemblies()[i];
                var fstring = System.IO.File.ReadAllText(file.Location);
                var snippet = new CodeSnippetCompileUnit();
                snippet.Value = fstring;
                snippets.SetValue(snippet, i);
            }

            var result = CodeDomProvider.CreateProvider("C#")
                .CompileAssemblyFromDom(compileParameters, compilationUnits: snippets);

            foreach (var str in result.Output)
            {
                Console.WriteLine(str);
            }
        }
        
        private void ToCode(string fileName, string type = "C#")
        {
            var codeText = new StringBuilder();
            using (var codeWriter = new StringWriter(codeText))
            {
                var compilerOptions = new CodeGeneratorOptions
                {
                    IndentString = "    ", BracingStyle = type
                };
                CodeDomProvider.CreateProvider(type)
                    .GenerateCodeFromNamespace(nameSpace, codeWriter, compilerOptions);
            }

            using (var writer = new StreamWriter(fileName))
            {
                writer.Write(codeText);
            }
        }
        
#if UNITY_EDITOR
        [MenuItem("Assets/Generate Sample Script")]
        public static void GenerateSampleScript()
        {
            // アセットのパスを作成
            var filePath = "Assets/GenerateTest/Sample.cs";
            var assetPath = AssetDatabase.GenerateUniqueAssetPath(filePath);
            EditorApplication.ExecuteMenuItem("");
            AssetDatabase.ImportAsset();
            AssetDatabase.Refresh();
        }
#endif
        
#if tool
        // TCPポートを開く
        
        // SDDebugger
#endif
    }
}